@Library('java-shared-library') _

pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndestroy', description: 'Choose Create/Destroy')
        string(name: 'awsAccountId', description: 'Enter AWS Account Id', defaultValue: '554723871506')
        string(name: 'ecrRepository', description: 'Enter ECR Repository', defaultValue: 'java-repository')
        string(name: 'awsRegion', description: 'Enter AWS Region', defaultValue: 'ap-south-1')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster')
    }

    environment {
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_ACCESS_SECRET_KEY_ID')
        EKS_CLUSTER_CREATED = false
    }

    stages{

        stage("Clean Jenkins"){
            when{ expression {params.action == 'create'} }
            steps{
                cleanWs()
            }  
        }
        stage("Git Checkout"){
            when{ expression {params.action == 'create'} }
            steps{
                gitCheckout(
                    branch: 'main',
                    url: 'https://github.com/vinodpal161191/java-springboot-jenkins-shared-lib.git'
                )
            }  
        }

        stage("mvn: Unit Test"){
            when{ expression {params.action == 'create'} }
            steps{
                mvnUnitTest()
            }  
        }  

        stage("mvn: Integration Test"){
            when{ expression {params.action == 'create'} }
            steps{
                mvnIntegrationTest()
            }  
        }

        stage("sonar: Code analysis Test"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    def sonarCredentialsId = 'sonarqube-secret'
                    codeAnalysisSonar(sonarCredentialsId)
                }
            }  
        }

        stage("sonar: Quality Gate Test"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    def sonarCredentialsId = 'sonarqube-secret'
                    qualityGateSonar(sonarCredentialsId)
                }
            }  
        }

        stage("mvn: Build"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    mvnBuild()
                }
            }  
        }

        stage("docker: Image Build ECR"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    dockerImageBuild("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage("trivy: Scan Image"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    trivyScanImage("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage('Connect to EKS '){
            when { expression {  params.action == 'create' } }
            steps{

                script{

                    sh """
                    aws configure set aws_access_key_id "$ACCESS_KEY"
                    aws configure set aws_secret_access_key "$SECRET_KEY"
                    aws configure set region "${params.awsRegion}"
                    
                    """
                }
            }
        } 

        stage("docker: Push Image ECR"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    // sh """
                    // aws configure unset aws_access_key_id "$ACCESS_KEY"
                    // aws configure unset aws_secret_access_key "$SECRET_KEY"
                    // aws configure unset region "${params.awsRegion}"
       
                    // """
                     dockerImagePush("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage("docker: Clean up Image ECR"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    dockerImageCleanUp("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' && env.EKS_CLUSTER_CREATED == false } }
            steps{
                script{

                    dir('eks_module') {
                      sh """
                          
                          terraform init 
                          terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.awsRegion}' --var-file=./config/terraform.tfvars
                          terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.awsRegion}' --var-file=./config/terraform.tfvars --auto-approve
                      """
                  }
                  sh "aws eks --region ${params.awsRegion} update-kubeconfig --name ${params.cluster}"
                  env.EKS_CLUSTER_CREATED = true
                }
                
            }
        }
        
        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' && env.EKS_CLUSTER_CREATED == true } }
            steps{
                script{
                  
                  def apply = false

                  try{
                    input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                    apply = true
                  }catch(err){
                    apply= false
                    currentBuild.result  = 'UNSTABLE'
                  }
                  if(apply){

                    sh """
                      kubectl apply -f .
                    """
                  }
                }
            }
        }  

        stage('Destroy EKS Cluster : Terraform'){
            when { expression {  params.action == 'destroy' && env.EKS_CLUSTER_CREATED == true } }
            steps{
                script{

                    dir('eks_module') {
                      sh """
                          
                          terraform init 
                          terraform destroy -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.awsRegion}' --var-file=./config/terraform.tfvars --auto-approve
                          

                      """
                  }
                 env.EKS_CLUSTER_CREATED = false
                }
            }
        }  

        
    }
}