@Library('java-shared-library') _

pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndestroy', description: 'Choose Create/Destroy')
        string(name: 'awsAccountId', description: 'Enter AWS Account Id', defaultValue: '554723871506')
        string(name: 'ecrRepository', description: 'Enter ECR Repository', defaultValue: 'java-repository')
        string(name: 'awsRegion', description: 'Enter AWS Region', defaultValue: 'ap-south-1')
    }

    environment {
        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_ACCESS_SECRET_KEY_ID')
    }

    stages{
        stage("Git Checkout"){
            when{ expression {params.action == 'create'} }
            steps{
                gitCheckout(
                    branch: 'main',
                    url: 'https://github.com/vinodpal161191/java-springboot-jenkins-shared-lib.git'
                )
            }  
        }

        stage("mvn: Unit Test"){
            when{ expression {params.action == 'create'} }
            steps{
                mvnUnitTest()
            }  
        }  

        stage("mvn: Integration Test"){
            when{ expression {params.action == 'create'} }
            steps{
                mvnIntegrationTest()
            }  
        }

        stage("sonar: Code analysis Test"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    def sonarCredentialsId = 'sonarqube-secret'
                    codeAnalysisSonar(sonarCredentialsId)
                }
            }  
        }

        stage("sonar: Quality Gate Test"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    def sonarCredentialsId = 'sonarqube-secret'
                    qualityGateSonar(sonarCredentialsId)
                }
            }  
        }

        stage("mvn: Build"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    mvnBuild()
                }
            }  
        }

        stage("docker: Image Build ECR"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    dockerImageBuild("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage("trivy: Scan Image"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                    trivyScanImage("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage("docker: Push Image ECR"){
            when{ expression {params.action == 'create'} }
            steps{
                script{
                     dockerImagePush("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        stage("docker: Clean up Image ECR"){
            when{ expression {params.action == 'destroy'} }
            steps{
                script{
                    dockerImageCleanUp("${params.awsAccountId}", "${params.ecrRepository}", "${params.awsRegion}")
                }
            }  
        }

        
    }
}